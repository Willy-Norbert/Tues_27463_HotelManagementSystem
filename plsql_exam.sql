-- Enable DBMS Output
SET SERVEROUTPUT ON;

-- Step 1: Alter Guests table to add Gender column (only once)
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE Guests ADD Gender VARCHAR2(10)';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE = -01430 THEN
      DBMS_OUTPUT.PUT_LINE('Column already exists.');
    ELSE
      RAISE;
    END IF;
END;
/

-- Step 2: Sample DML Operations
UPDATE Guests SET Contact = '0788001121' WHERE GuestID = 1;
DELETE FROM Payments WHERE PaymentID = 10;
-- Use a unique RoomID to avoid ORA-00001
INSERT INTO Rooms VALUES (112, 'Single', 48000, 'Available');

-- Step 3: Procedure to summarize guest booking/payment
CREATE OR REPLACE PROCEDURE GetGuestSummary (
  p_guest_id IN Guests.GuestID%TYPE
) AS
  v_total_bookings NUMBER := 0;
  v_total_paid NUMBER(10,2) := 0;
BEGIN
  SELECT COUNT(*), NVL(SUM(p.Amount), 0)
  INTO v_total_bookings, v_total_paid
  FROM Bookings b
  LEFT JOIN Payments p ON b.BookingID = p.BookingID
  WHERE b.GuestID = p_guest_id;

  DBMS_OUTPUT.PUT_LINE('Guest ID: ' || p_guest_id);
  DBMS_OUTPUT.PUT_LINE('Total Bookings: ' || v_total_bookings);
  DBMS_OUTPUT.PUT_LINE('Total Paid: ' || v_total_paid);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

-- Step 4: Create holidays table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE Holidays CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE Holidays (
  HolidayDate DATE PRIMARY KEY,
  Description VARCHAR2(100)
);

-- Insert May 2025 holidays
INSERT INTO Holidays VALUES (TO_DATE('2025-05-17', 'YYYY-MM-DD'), 'Independence Day');
INSERT INTO Holidays VALUES (TO_DATE('2025-05-23', 'YYYY-MM-DD'), 'National Heroes Day');
COMMIT;

-- Step 5: Create Audit_Log table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE Audit_Log CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE Audit_Log (
  AuditID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  UserName VARCHAR2(50),
  ActionDate DATE,
  Operation VARCHAR2(10),
  TableName VARCHAR2(30),
  Status VARCHAR2(10)
);

-- Step 6: Audit logging procedure (autonomous transaction)
CREATE OR REPLACE PROCEDURE log_audit_action (
  p_user     VARCHAR2,
  p_action   VARCHAR2,
  p_table    VARCHAR2,
  p_status   VARCHAR2
) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  INSERT INTO Audit_Log (UserName, ActionDate, Operation, TableName, Status)
  VALUES (p_user, SYSDATE, p_action, p_table, p_status);
  COMMIT;
END;
/

-- Step 7: Trigger with weekday and holiday restriction
CREATE OR REPLACE TRIGGER trg_block_weekday_holiday_ops
BEFORE INSERT OR UPDATE OR DELETE ON Guests
FOR EACH ROW
DECLARE
  v_day VARCHAR2(10);
  v_holiday NUMBER := 0;
  v_username VARCHAR2(50);
BEGIN
  v_username := SYS_CONTEXT('USERENV', 'SESSION_USER');
  
  -- FIXED NLS_DATE_LANGUAGE syntax
  SELECT TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE=''ENGLISH''') INTO v_day FROM DUAL;
  SELECT COUNT(*) INTO v_holiday FROM Holidays WHERE HolidayDate = TRUNC(SYSDATE);

  IF UPPER(v_username) = 'IRABARUTA' AND 
     (v_day IN ('MON', 'TUE', 'WED', 'THU', 'FRI') OR v_holiday > 0) THEN
    log_audit_action(v_username, 'BLOCKED', 'GUESTS', 'DENIED');
    RAISE_APPLICATION_ERROR(-20001, 'Operation not allowed on weekdays or public holidays');
  ELSE
    log_audit_action(v_username, 'ALLOWED', 'GUESTS', 'ALLOWED');
  END IF;
END;
/

-- Step 8: Compound Trigger for multi-row insert audit on Payments
CREATE OR REPLACE TRIGGER trg_multirow_audit
FOR INSERT ON Payments
COMPOUND TRIGGER

  TYPE audit_rec IS RECORD (
    uname VARCHAR2(50),
    op_date DATE,
    op_type VARCHAR2(10),
    tbl_name VARCHAR2(30),
    status VARCHAR2(10)
  );
  TYPE audit_tbl IS TABLE OF audit_rec;
  v_audits audit_tbl := audit_tbl();

BEFORE STATEMENT IS
BEGIN
  NULL;
END BEFORE STATEMENT;

AFTER EACH ROW IS
BEGIN
  v_audits.EXTEND;
  v_audits(v_audits.LAST) := audit_rec(
    SYS_CONTEXT('USERENV', 'SESSION_USER'),
    SYSDATE,
    'INSERT',
    'PAYMENTS',
    'ALLOWED'
  );
END AFTER EACH ROW;

AFTER STATEMENT IS
BEGIN
  FOR i IN 1 .. v_audits.COUNT LOOP
    INSERT INTO Audit_Log (UserName, ActionDate, Operation, TableName, Status)
    VALUES (v_audits(i).uname, v_audits(i).op_date, v_audits(i).op_type, v_audits(i).tbl_name, v_audits(i).status);
  END LOOP;
  COMMIT;
END AFTER STATEMENT;

END;
/

-- Step 9: Test GetGuestSummary procedure
BEGIN
  GetGuestSummary(1);
END;
/

-- Step 10: Test INSERT (this may be blocked depending on day or holiday)
BEGIN
  INSERT INTO Guests (GuestID, Name, Contact, Email)
  VALUES (99, 'Blocked User', '0700000000', 'block@example.com');
END;
BEGIN
  INSERT INTO Guests (GuestID, Name, Contact, Email)
  VALUES (991, 'Blocked Usera', '070000000', 'blo1ck@example.com');
END;
/

-- Step 11: View audit log
SELECT * FROM Audit_Log ORDER BY ActionDate DESC;
